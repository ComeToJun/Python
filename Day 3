for i, v in enumerate(['tic', 'tac', 'toe']):
    print(i, v)

******

0 tic
1 tac
2 toe

-------------------------------------------------------------------------------------


result = {i: j for i, j in enumerate("""The Dark Tower is a series of eight books and 
one short story written by American author Stephen King""".split())}
print(result)

****

{0: 'The', 1: 'Dark', 2: 'Tower', 3: 'is', 4: 'a', 5: 'series', 6: 'of', 7: 'eight', 8: 'books', 
9: 'and', 10: 'one', 11: 'short', 12: 'story', 13: 'written', 14: 'by', 15: 'American', 16: 'author', 17: 'Stephen', 18: 'King'}

***리스트에도 사용 가능 (위에)
***딕셔너리에서도 사용 가능 


--------------------------------------------------------------------------------------------

alist = ['a1', 'a2', 'a3']
blist = ['b1', 'b2', 'b3', 'b4']
for a, b in zip(alist, blist):
    print(a, b)

****

a1 b1
a2 b2
a3 b3

** 2개의 콜렉션 데이터 구체적으로 리스트, a리스트 b리스트, 동일한 첨자끼리 튜플로 구분해준다. (묶어주는 것)
묶어서 리스트를 만들어준다. b4는 짝이 없으니 탈락하게 된다.

----------------------------------------------------------------------------------------------------

a, b, c = zip((1,2,3), (10,20,30), (100,200,300))
print(a, b, c)

******

(1, 10, 100) (2, 20, 200) (3, 30, 300)

** 왜 이렇게 나오는지 잘 생각해봐야함
** 튜플을 튜플로 묶어놓았음

a b c 3개의 항목으로 묶여있기 때문에 
zip 의 특성

----------------------------------------------------------------------------------------------------

result = [sum(x) for x in zip((1,2,3), (10,20,30), (100,200,300))]
print(result)

*********

[111, 222, 333]

리스트로 만들어줌

----------------------------------------------------------------------------------------------------

alist = ['a1', 'a2', 'a3']
blist = ['b1', 'b2', 'b3']
for i, (a, b) in enumerate(zip(alist, blist)):
    print(i, a, b)

*********

0 a1 b1
1 a2 b2
2 a3 b3

----------------------------------------------------------------------------------------------------

람다식 
자바에서는 익명구현객체를 람다식으로 대체하기 위해
파이썬에서는 익명함수를 대신하기 위해 람다식을 사용


표기법에서 가장 큰 차이점
자바 : 중가로로 여러줄의 코드가 들어갈 수 있음
파이썬 : 오직 1줄여야만 한다. ( 문법적 제한 )

def f(x, y):
    return x + y

print(f(1, 4))

람다식 ->

f1 = lambda  x, y: x + y
print(f1(1,4))

-> print((lambda x, y: x + y)(1, 4)) 가독성은 좋지 않지만, 한줄로도 표현 가능

-------------------------------------------------------------------------------------------

f = lambda n, m: n if n%2 == 0 else m
print(f(1, 3))
print()
print(f(2, 3))

*********

3

2

-----------------------------------------------------------------------------------------

def makeFunc(n):
    return lambda a : a % n == 1

isOdd = makeFunc(2)
print(isOdd(3))
print(isOdd(4))

*****

True
False

-----------------------------------------------------------------------------------------

def variable_length(a, b, *args):
    print(a)
    print(b)
    print(args)

variable_length(1,2,3,4,5)

****

1
2
(3, 4, 5)

****딕셔너리를 가변인자로 바꾸기 위해서는 다른 스타일로 만들어야 함
-----------------------------------------------------------------------------------------

def key_variable_length(**args):
    print(args)				//언패킹 하라는 말
    print("First value is {first}".format(**args))
    print(f"Fist value is {args.get('first')}")
    print("Second value is {second}".format(**args))
    print("Third value is {third}".format(**args))

key_variable_length(first=3, second=4, third=5)

*****
{'first': 3, 'second': 4, 'third': 5}
Fisrt value is 3
Fist value is 3
Second value is 4
Third value is 5


*** 내가 딕셔너리 가변인자를 가져오기 위해서 설정하는 것 (선언할때 ** 와 실행할때 **의 다른점을 잘알아야함)

---------------------------------------------------------------------------------------------------

def asterisk_test(a, *args):
    print(a, args)
    print(type(args))

asterisk_test(1, 2, 3, 4, 5, 6)

**
1 (2, 3, 4, 5, 6)
<class 'tuple'>

-------------------------------------------------------------------------------------------------------


def asterisk_test(a, **kwargs):
    print(a, kwargs)
    print(type(kwargs))

asterisk_test(1, b=2, c=3, d=4, e=5, f=6)

*****
1 {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
<class 'dict'>

---------------------------------------------------------------------------------------------

def unpacking_test(a, args):  //단일값으로 지정
    print(a, *args)		/// * 이 붙어서 그걸 풀어줘라 라고 해석해야 함
    print(type(args))

unpacking_test(1, (2, 3, 4, 5, 6))

*****

1 2 3 4 5 6
<class 'tuple'>

튜플을 전부 풀어서 나오게 된다.
-----------------------------------------------------------------------------------------

def unpacking_test(a, *args):
    print(a, args)
    print(a, *args)
    print(a, args)
    print(type(args))

unpacking_test(1, *(2,3,4,5,6))

******
1 (2, 3, 4, 5, 6)
1 2 3 4 5 6
1 (2, 3, 4, 5, 6)
<class 'tuple'>

---------------------------------------------------------------------------------------

a, b, c = ([1, 2], [3, 4], [5, 6])
print(a, b, c)
print()

data = ([1, 2], [3, 4], [5, 6])
print(*data)

*******

[1, 2] [3, 4] [5, 6]

[1, 2] [3, 4] [5, 6]

***type 이라는 함수에는 인자가 하나만 와야 함

-------------------------------------------------------------------------------------------

tom_score = [95, 86, 90]
jane_score = [90, 90, 100]
kate_score = [100, 100, 80]
student_score = [tom_score, jane_score, kate_score]

tom_total = 0
jane_total = 0
kate_total = 0
for tom, jane, kate in zip(*student_score):	//언패킹 하니까 각각 인덱스별로 가로였던걸 세로로 묶어서 계산해줌
    tom_total += tom
    jane_total += jane
    kate_total += kate

print(tom_total /3, jane_total /3 , kate_total /3)

********
90.33333333333333 93.33333333333333 93.33333333333333

-------------------------------------------------------------------------------------------------

def unpacking_dick(a,b,c,d):
    print(a,b,c,d)

data = {'b': 1, 'c':2, 'd':3}
unpacking_dick(10, **data)

****

10 1 2 3


-----------------------------------------------------------------------------------------

클래스

class 클래스 이름 (상속받을 키워드):
최상위클래스는 object - 자바와의 차이점은 대문자 소문자 차이//파이썬은 모두 소문자//자바는 시작이 대문자

자바에서의 생성자 __init__



class SoccerPlayer(object):   #(object 있어도 없어도 상관없음)
    def __init__(self, name, position, back_number):    #생성자
        self.name = name                                #인스턴스 필드를 바로 만들어버림
        self.position = position
        self.back_number = back_number

    def change_back_number(self, new_number):   #인자가 하나 있는 메소드
        print("선수 등번호 변경: From %d to %d" % (self.back_number, new_number))
        self.back_number = new_number

    def __str__(self):  #인자가 밖에서 호출할때는 안들어온다. 해당객체를 프린트 했을때 자바(Tostring)과 비슷한 개념
        return "Hello, My name is %s. I play in %s in center." % (self.name, self.position)

chaboom = SoccerPlayer("Chaboom", "CF", 11)

print("현재 선수의 등번호:", chaboom.back_number)
chaboom.change_back_number(9)
print("현재 선수의 등번호:", chaboom.back_number)
print()
print(chaboom)

*********

현재 선수의 등번호: 11
선수 등번호 변경: From 11 to 9
현재 선수의 등번호: 9

Hello, My name is Chaboom. I play in CF in center.

--------------------------------------------------------------------------------

클래스 변수
	클래스 내, 메소드 밖에 선언 하는 변수
	해당 클래스로 생성한 모든 객체가 공통으로 접근할 수 있는 변수
	"클래스명,변수명" 으로 사용
	//자바에서의 static 필드

인스턴스 변수
	클래스 내부의 메소드 안에서 "self.변수명" 으로 선언한 변수
	각 인스턴스 별로 생성
	객체 생성후 "객체명.변수명" 으로 접근

---------------------------------------------------------------------------------

class Car:
    isinstance_count = 0

    def __init__(self, size, color):
        self.size = size
        self.color = color
        Car.isinstance_count += 1
        print(f"자동차 객체의 수: {Car.isinstance_count}")

    def move(self):
        print(f"자동차({self.size} & {self.color})가 움직입니다.")

car1 = Car("small", "white")
car2 = Car("big", "black")
car3 = Car("middle", "red")
print(f"Car 클래스의 총 인스턴스 수: {Car.isinstance_count}")
car1.move()
car2.move()
car3.move()

**************

자동차 객체의 수: 1
자동차 객체의 수: 2
자동차 객체의 수: 3
Car 클래스의 총 인스턴스 수: 3
자동차(small & white)가 움직입니다.
자동차(big & black)가 움직입니다.
자동차(middle & red)가 움직입니다

------------------------------------------------------------------------------------------------

파이썬 class 에서 static 메소드 만드는 방법
	
static 메소드
	독립적으로 동작, 정의할 때 self 를 사용하지 않음
	static 메소드 안에서 인스턴스 메서드, 인스턴스 변수에 접근할 수 없음
	함수 앞에 @staticmethod 를 선언하여 static 메서드를 표시


-----------------------------------------------------------------------------------------------

class Car:
    isinstance_count = 0

    def __init__(self, size, color):  #self, size, color 는 인스턴스 변수
        self.size = size
        self.color = color
        self.speed = 0
        Car.isinstance_count += 1
        print(f"자동차 객체의 수: {Car.isinstance_count}")

    def move(self, speed):
        self.speed = speed
        print(f"자동차({self.size} & {self.color})가", end=' ')
        print(f"시속 {self.speed}킬로미터로 전진")

    def auto_cruise(self):
        print("자율 주행 모드")
        self.move(self.speed)

    @staticmethod
    def check_type(model_code):
        if (model_code >= 20):
            print("이 자동차는 전기차입니다.")
        elif (10 <= model_code < 20):
            print("이 자동차는 가솔린차입니다.")
        else:
            print("이 자동차는 디젤차입니다.")

car = Car("small", "white")

car.move(80)
car.auto_cruise()
Car.check_type(25)	//staticmethod 이기 때문에 클래스에서 바로 가져와서 사용 가능

**************************

자동차 객체의 수: 1
자동차(small & white)가 시속 80킬로미터로 전진
자율 주행 모드
자동차(small & white)가 시속 80킬로미터로 전진
이 자동차는 전기차입니다.


-----------------------------------------------------------------------------------

클래스 메소드 : 클래스 변수를 사용하기 위한 메소드
위 클래스에서 추가하면 가능 but 지금은 사용할 일이 거의 없다. 나중에 심화과정에서 사용할 듯

  @classmethod
  def count_instance(cls):
        print(f"클래스변수: {cls.isinstance_count}")

Car.count_instance()

*****
클래스변수: 1

-------------------------------------------------------------------------------------------

상속

class Bicycle:
    def __init__(self, wheel_size, color):
        self.wheel_size = wheel_size
        self.color = color

    def move(self, speed):
        print(f"자전거 시속 {speed}킬로미터로 전진")

    def turn(self, direction):
        print(f"자전거: {direction}회전")

    def stop(self):
        print(f"자전거({self.wheel_size}, {self.color}): 정지")

class FoldingBicycle(Bicycle):
    def __init__(self, wheel_size, color, state):
        super().__init__(wheel_size, color)
        self.state = state

    def fold(self):
        self.state = 'folding'
        print(f"자전거: 접기, state = {self.state}")

    def unfold(self):
        self.state = 'unfolding'
        print(f"자전거: 표기, state = {self.state}")


folding_bicycle = FoldingBicycle(27, 'white', 'unfolding')
folding_bicycle.move(20)
folding_bicycle.turn('right')
folding_bicycle.stop()
folding_bicycle.fold()
folding_bicycle.unfold()

***************

자전거 시속 20킬로미터로 전진
자전거: right회전
자전거(27, white): 정지
자전거: 접기, state = folding
자전거: 표기, state = unfolding

---------------------------------------------------------------------------------------------------

class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def about_me(self):
        print("저의 이름은", self.name, end=' ')
        print(f"{self.gender}이고요, 제 나이는", str(self.age), "살입니다.")

class Employee(Person):
    def __init__(self, name, age, gender, salary, hire_date):
        super().__init__(name, age, gender)
        self.salary = salary
        self.hire_date = hire_date

    def do_work(self):
        print("열심히 일을 한다")

    def about_me(self):
        super().about_me()
        print("제 급여는", self.salary, "원이고, 제 입사일은", self.hire_date, "입니다")

emp = Employee('Tom', 25, '남성', 350, '2020/06/02')
emp.do_work()
emp.about_me()

************
열심히 일을 한다
저의 이름은 Tom 남성이고요, 제 나이는 25 살입니다.
제 급여는 350 원이고, 제 입사일은 2020/06/02 입니다

-----------------------------------------------------------------------------------------------

class Product:
    pass

class Inventory(object):
    def __init__(self):
        self.__items = []  #  '__' 붙이면 외부에서 접근 불가능한 private 접근제한자 생성 가능

    def add_new_item(self, product):
        if type(product) == Product:
            self.__items.append(product)
            print("new item added")
        else:
            raise ValueError("Invalid Item")

    def get_number_of_items(self):
        return len(self.__items)

my_inventory = Inventory()
my_inventory.add_new_item(Product())
my_inventory.add_new_item(Product())
//my_inventory.__items()

*****

new item added
new item added
//에러 발생


------------------------------------------------

class Product:
    pass

class Inventory(object):
    def __init__(self):
        self.__items = []  #  '__' 붙이면 외부에서 접근 불가능한 private 접근제한자 생성 가능

    def add_new_item(self, product):
        if type(product) == Product:
            self.__items.append(product)
            print("new item added")
        else:
            raise ValueError("Invalid Item")

    def get_number_of_items(self):
        return len(self.__items)

    @property		//프로퍼티로 
    def items(self):
        return self.__items

my_inventory = Inventory()
items = my_inventory.items
print(items)
print()
items.append(Product)
print(items)

******************

[]

[<class '__main__.Product'>]					** 다시 한번 볼것

-----------------------------------------------------------------------------------------------

벡터

항목이 2개 있는걸 2차원 벡터라고 한다.

def add(v, w):
    assert len(v) == len(w)
    return [v_i + w_i for v_i, w_i in zip(v,w)]

assert add([1, 2, 3], [4, 5, 6]) == [5, 7, 9]

****

def subtract(v, w):
    assert len(v) == len(w)
    return [v_i - w_i for v_i, w_i in zip(v,w)]
assert subtract([5, 7, 9], [4, 5, 6]) == [1, 2, 3]

****

def vector_sum(vectors):
    assert vectors, "no vectors provided!"

    num_elements = len(vectors[0])
    assert all(len(v) == num_elements for v in vectors), "different sizes!"

    return [sum(vector[i] for vector in vectors) for i in range(num_elements)]

assert vector_sum([[1,2], [3,4], [5,6], [7,8]]) == [16, 20]   *********************** 다시


**벡터방식으로 공식 만들기 참고할 것.

Vector * scalar : [2, 3] * 4 = [8, 12]


def scalar_multiply(c, v):
    return [c * i for i in v]


assert scalar_multiply(2, [1,2,3]) == [2,4,6]

***

def vector_mean(vectors):
    n = len(vectors)
    return scalar_multiply(1 / n, vectors_sum(vectors))


assert vector_mean([[1, 2], [3, 4], [5, 6]]) == [3, 4]                         ************** 다시

****

def dot(v, w):
    assert len(v) == len(w), "vectors must be same length"
    return sum(v_i * w_i for v_i, w_i in zip(v,w))


assert dot([1,2,3], [4,5,6]) == 32  //인덱스별로 곱해서 더해라

위에 있는 dot 함수를 가져와서 사용

def sum_of_squares(v):
    return dot(v,v)

assert sum_of_squares([1, 2, 3]) == 14  #인덱스별로 제곱해서 더하기


-------------------------------------------------------------------------------------------

행렬


------------------------------------------------------------------------------

1) 벡터 연산 (벡터의 합)
u = [2, 2]
v = [1, 2]
z = [-3, 5]

------------------------------------------------------------------------------


u = [2, 2]
v = [1, 2]
z = [-3, 5]
result = []

for i in range(len(u)):
    result.append(u[i] + v[i] + z[i])
print(result)

********

result = [sum(x) for x in zip (u, v, z)]
print(result)

같은 값 ( zip으로 해서 더하기)

*****

def vector_addition(*args):
    return [sum(x) for x in zip(*args)]

u = [2, 2]
v = [1, 2]
z = [-3, 5]
print(vector_addition(u, v, z))

언패킹 방법

******

def vector_addition(*args):
    return [sum(x) for x in zip(*args)]

vectors = [[2, 2],[1, 2],[-3, 5]]
print(vector_addition(*vectors))


전체 같은 답 : [0, 9]

------------------------------------------------------------------------------------------


u = [1,2,3]
v = [4,3,3]
alpha = 2
result = [alpha * sum(x) for x in zip(u, v)]

print(result)

*****

[10, 10, 12]

------------------------------------------------------------------------------------------


matrix_a = [[3, 6], [4, 5]]
matrix_b = [[5, 8], [6, 7]]


result = [[sum(row) for row in zip(*t)] for t in zip(matrix_a, matrix_b)]
print(result)

** 답 [[8, 14], [10, 12]]

**# result = [sum(x) for x in zip(*matrix_a, *matrix_b)] 틀린 답

zip으로 이중리스트를 이용해서 각 인덱스 값을 더하기

print(t for t in zip(a,b))
print([row for row in zip(*t)] for t in zip(a,b))
print([sum(row) for row in zip(*t)] for t in zip(a,b))



------------------------------------------------------------------------------

a = [[1, 2, 3], [4, 5, 6]]
a_t = [[1, 4], [2, 5], [3, 6]]

matrix_a = [1, 2, 3], [4, 5, 6]
result = [[element for element in t] for t in zip(*matrix_a)]
print(result)


****

[[1, 4], [2, 5], [3, 6]]				*****************다시

-------------------------------------------------------------------------

a = [[1, 1, 2], [2, 1, 1]]
b = [[1, 1], [2, 1], [1, 3]]

result = [[sum(a * b for a, b in zip(row_a, column_b)) for column_b in zip(*b)] for row_a in a]
print(result)

[[5, 8], [5, 6]]

** 뒤에서부터 하나씩 빠져나와서 진행
** a 에서 1 1 2 빼고, *b 를 zip 하면 1 1 2 와 1 2 1 이 나옴
** row_a column_b 를 zip 으로 하면 (1,1), (1,2), (2,1) 로 나뉨
** a* b for a, b 는 (1, 1) 빼서 a=1, b=1 곱하면 1 나머지 3개 전부 곱해서 나온값을 sum

반복

---------------------------------------------------------------------------------


